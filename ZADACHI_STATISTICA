#Ваша задача — получить выборку объема  из равномерного распределения  с заданными параметрами:
# , random seed (случайное рассеивание) = 2


import numpy as np

print("Генерация выборки")
np.random.seed(2) #задание random seed
sample = np.random.uniform(1, 3, 10)
#генерация выборки
print(sample) #вывод выборки на печать
print(sum(sample)/len(sample)) #вывод выборочного среднего

'''
Для выборки из распределения Бернулли  объема Bp строчку с sample нужно заменить на
sample = np.random.binomial(1, p, volume)

Для выборки из биномиального распределения  объема Bin n,p строчку с sample нужно заменить на
sample = np.random.binomial(n, p, volume)

Для выборки из геометрического распределения  объема  G p строчку с sample нужно заменить на
sample = np.random.geometric(p, volume)

Для выборки из распределения Пуассона  объема P∆  строчку с  sample   нужно заменить на
sample = np.random.poisson(lambda, volume)

Для выборки из равномерного распределения  объема U a,b  строчку с sample нужно заменить на
sample = np.random.uniform(a, b, volume)

Для выборки из показательного распределения  объема Exp ∆ строчку с sample нужно заменить на
sample = np.random.exponential(1/lambda, volume)

Для выборки из нормального распределения  объема N a,∂^2 строчку с sample нужно заменить на
sample = np.random.normal(a, sigma, volume)

2 задача: 
 10 алхимиков независимо друг от друга пытаются получить эликсир бессмертия. Они нашли все необходимые ингредиенты, и теперь осталось только прочитать заклинание, состоящее из необходимого числа слов. Однако вот какая проблема: на прочтение правильного заклинания у каждого алхимика есть всего одна попытка, иначе зелье взорвется. Количество слов, которое читает каждый алхимик, соответствует данной выборке:
а нужное количество слов — выборочной медиане.
5 5 6 2 2 1 2 5 1 4 
Постройте эмпирическое распределение случайной величины , показывающей количество прочитанных слов:

X = np.array([5, 5, 6, 2, 2, 1, 2, 5, 1, 4])
density_distribution = {i: np.array(X == i).sum() / X.size for i in np.unique(X)}
print(density_distribution, density_distribution[1], density_distribution[2], density_distribution[4],density_distribution[5],density_distribution[4])

'''
import pandas as pd
from matplotlib import pyplot as plt

X = np.array([3, 1, 3, 2, 2, 3, 1, 3, 1, 4, 1, 2, 1, 4, 3, 2, 3, 3, 1, 0, 1, 3, 3, 1, 2, 2, 5, 2, 2, 0])
density_distribution = {i: np.array(X == i).sum() / X.size for i in np.unique(X)}
print(density_distribution, density_distribution[3], density_distribution[4], density_distribution[3] + density_distribution[4])

#print (pd.DataFrame((density_distribution, density_distribution[1], density_distribution[2], #density_distribution[4],density_distribution[5],density_distribution[4])))


print(sum([density_distribution[k] for k in density_distribution.keys() if k > 3]))

plt.hist(X,bins=6)
plt.show()

print(X.sum() / X.size)
print("Смещенная дисперсия", np.var(X))
print("Несмещенная дисперсия", np.var(X, ddof=1))

X.sort()
(X[14] + X[15]) / 2, X[int(0.25 * X.size) + 1], X[int(0.75 * X.size) + 1]

print("Середина выборки",np.quantile(X, 0.5))

print("Квантиль 0.25 выборки",np.quantile(X, 0.25))
print("Квантиль 0.75 выборки",np.quantile(X, 0.75))